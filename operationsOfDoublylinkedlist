#include<bits/stdc++.h>


using namespace std;

class node
{

public:

    int data;

    node* nxt;
    node* prev;


};


class doublyLinkedList
{

public:

    node* head;

    int sz;


    doublyLinkedList()
    {
        head=NULL;

        sz=0;
    }

    node* createNewNode(int val)
    {
        node* a= new node;

        a->data=val;
        a->nxt=NULL;
        a->prev=NULL;

        return a;
    }



    void insertAtHead(int val)
    {

        sz++;
        node* a=createNewNode(val);

        if(head==NULL)
        {
            head=a;
            return ;
        }

        node* b=head;


        a->nxt=b;

        b->prev=a;

        head=a;




    }

    void traverse()
    {
        if(head==NULL)
        {
            cout<<"No value to show\n";
            return ;

        }

        node* a=head;

        while(a!=NULL)
        {
            cout<<a->data<<" ";

            a=a->nxt;
        }


    }


    void insertAtAnIndex(int val,int idx)
    {
        if(idx==0)
        {
            insertAtHead(val);
            return ;
        }

        sz++;



        int current=0;

        node* a =head;

        while(current!=idx-1)
        {
            a=a->nxt;

            current++;
        }


        node* b=createNewNode(val);

        b->prev=a;
        b->nxt=a->nxt;
        a->nxt=b;






    }

    void deleteAtAnIndex(int idx)
    {

        node* a=head;

        if(idx==0)
        {
            head=a->nxt;

            delete a;
            sz--;

            return ;
        }

        int current=0;


        if(idx==sz)
        {
            while(current!=idx-1)
            {
                a=a->nxt;
                current++;
            }

            node* b=a->nxt;

            delete b;

            sz--;
            return;
        }


        while(current!=idx)
        {
            a=a->nxt;
            current++;

        }

        node* b=a->prev;

        node* c=a->nxt;

        b->nxt= c;
        c->prev= b;

        delete a;

        sz--;




    }

    void reverseList()
    {

        node* a= head;
        node* b= head;

        int current=0;

        while(current!=sz-1)
        {
            b=b->nxt;

            current++;

        }



        while(a!=NULL)
        {

            swap(a->nxt,a->prev);

            a=a->prev;

        }

        head=b;



    }

    int length()
    {
        return sz;
    }



};

int main()
{

    doublyLinkedList ll;

    ll.insertAtHead(5);
    ll.insertAtHead(6);
    ll.insertAtHead(7);
    ll.insertAtHead(8);
    ll.insertAtHead(9);



    ll.insertAtAnIndex(10,2);

    cout<<"Before deletion--->"<<endl;

    ll.traverse();

    cout<<"\n";

    cout<<"size-->";

    cout<<ll.length();

    cout<<"\n";

    cout<<"After deletion--->"<<endl;

    ll.deleteAtAnIndex(4);


    ll.traverse();

    cout<<endl;


    ll.reverseList();
    ll.traverse();

    return 0;







}
